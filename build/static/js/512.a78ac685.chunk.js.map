{"version":3,"file":"static/js/512.a78ac685.chunk.js","mappings":"+KACA,QAAwB,qBAAxB,EAAsD,sBAAtD,EAAwF,yBAAxF,EAA0H,sBAA1H,EAAuJ,oBAAvJ,EAAoL,sB,uBCcpL,MAAMA,EAAoCC,IAAuD,IAAtD,MAAEC,EAAK,YAAEC,EAAW,MAAEC,EAAK,UAAEC,EAAS,OAAEC,GAAQL,EACvF,MAAM,UAAEM,IAAcC,EAAAA,EAAAA,KAChBC,GAAgBC,EAAAA,EAAAA,MACfC,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,IAC5CC,EAAUC,IAAeC,EAAAA,EAAAA,IAAU,CACtCC,aAAa,EACbC,UAAW,IAGTC,GAAWC,EAAAA,EAAAA,UAAQ,MACrBC,OAAQ,CACJC,QAAS,EACTC,OAAQ,IACRC,WAAY,CAAEC,SAAU,MAE5BC,QAAS,CACLJ,QAAS,EACTC,OAAQ,OACRC,WAAY,CAAEC,SAAU,SAE5B,IAuBJ,OArBAE,EAAAA,EAAAA,YAAU,MACDpB,GAAaI,IACVI,GAAeT,GAAUF,GACzBQ,GAAiB,GACjBH,EAAcmB,MAAM,YAEpBnB,EAAcmB,MAAM,UAE5B,GACD,CAACb,EAAaT,EAAQF,EAAOG,KAEhCoB,EAAAA,EAAAA,YAAU,KACDpB,GAAcI,IACXL,GAAUF,EACVK,EAAcmB,MAAM,WAEpBnB,EAAcmB,MAAM,UAE5B,GACD,CAACtB,EAAQF,EAAOG,EAAWI,KAG1BkB,EAAAA,EAAAA,MAAA,OAAKC,UAAS,GAAAC,OAAMzB,IAAWF,GAAU4B,GAAgBC,SAAA,EACrDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAcE,QAASA,IAAM7B,EAAUC,IAAWF,GAAS,EAAIA,GAAO6B,SAAA,CACjF/B,GACDiC,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,EAAcC,UAC1BE,EAAAA,EAAAA,KAAA,OAAKC,IAAI,oBAAoBC,QAAQ,OAAOC,IAAI,sBAGxDT,EAAAA,EAAAA,MAACU,EAAAA,EAAOC,IAAG,CACPC,IAAK3B,EACLgB,UAAWE,EACXU,QAASjC,EACTkC,QAAQ,SACRxB,SAAUA,EAASc,SAAA,EAEnBE,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,KAChBG,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,EAAYC,SAAE9B,KAC9BgC,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,SAElB,EAId,GAAeY,EAAAA,EAAAA,MAAK5C,E","sources":["webpack://blocknite/./src/components/FAQInput/style.module.scss?94f4","components/FAQInput/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"style_input__fT2Rf\",\"vector\":\"style_vector__840bI\",\"textBlock\":\"style_textBlock__3Jvmw\",\"divide\":\"style_divide__co8zS\",\"text\":\"style_text__7pNgc\",\"active\":\"style_active__Jbroz\"};","import { memo, useEffect, useState, useMemo } from 'react';\r\nimport { motion, useAnimation } from 'framer-motion';\r\nimport { useInView } from 'react-intersection-observer';\r\n\r\nimport styles from './style.module.scss';\r\nimport { useStateProvider } from '../../context/state';\r\n\r\ninterface FAQInputProps {\r\n    title: string;\r\n    description: string;\r\n    index: number;\r\n    setActive: (index: number) => void;\r\n    active: number;\r\n}\r\n\r\nconst FAQInput: React.FC<FAQInputProps> = ({ title, description, index, setActive, active }) => {\r\n    const { scrolling } = useStateProvider();\r\n    const titleControls = useAnimation();\r\n    const [shouldAnimate, setShouldAnimate] = useState(true);\r\n    const [refTitle, inViewTitle] = useInView({\r\n        triggerOnce: false,\r\n        threshold: 1,\r\n    });\r\n\r\n    const variants = useMemo(() => ({\r\n        hidden: {\r\n            opacity: 0,\r\n            height: '0',\r\n            transition: { duration: 0.75 },\r\n        },\r\n        visible: {\r\n            opacity: 1,\r\n            height: 'auto',\r\n            transition: { duration: 0.75 },\r\n        },\r\n    }), []);\r\n\r\n    useEffect(() => {\r\n        if (!scrolling && shouldAnimate) {\r\n            if (inViewTitle && active == index) {\r\n                setShouldAnimate(false);\r\n                titleControls.start('visible')\r\n            } else {\r\n                titleControls.start('hidden')\r\n            }\r\n        }\r\n    }, [inViewTitle, active, index, scrolling])\r\n\r\n    useEffect(() => {\r\n        if (!scrolling && !shouldAnimate) {\r\n            if (active == index) {\r\n                titleControls.start('visible')\r\n            } else {\r\n                titleControls.start('hidden')\r\n            }\r\n        }\r\n    }, [active, index, scrolling, shouldAnimate])\r\n\r\n    return (\r\n        <div className={`${(active === index) && styles.active}`}>\r\n            <div className={styles.input} onClick={() => setActive(active === index ? -1 : index)}>\r\n                {title}\r\n                <div className={styles.vector}>\r\n                    <img src='/icons/vector.svg' loading='lazy' alt=\"vector icon\" />\r\n                </div>\r\n            </div>\r\n            <motion.div\r\n                ref={refTitle}\r\n                className={styles.textBlock}\r\n                animate={titleControls}\r\n                initial=\"hidden\"\r\n                variants={variants}\r\n            >\r\n                <div className={styles.divide} />\r\n                <div className={styles.text}>{description}</div>\r\n                <div className={styles.divide} />\r\n            </motion.div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(FAQInput);\r\n"],"names":["FAQInput","_ref","title","description","index","setActive","active","scrolling","useStateProvider","titleControls","useAnimation","shouldAnimate","setShouldAnimate","useState","refTitle","inViewTitle","useInView","triggerOnce","threshold","variants","useMemo","hidden","opacity","height","transition","duration","visible","useEffect","start","_jsxs","className","concat","styles","children","onClick","_jsx","src","loading","alt","motion","div","ref","animate","initial","memo"],"sourceRoot":""}