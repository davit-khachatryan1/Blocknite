{"version":3,"file":"static/js/331.a08c9138.chunk.js","mappings":"yLACA,QAAuB,oBAAvB,EAAiD,mBAAjD,EAA2E,oB,aCc3E,MAAMA,EAA0CC,IAAgF,IAA/E,MAAEC,GAAQ,EAAK,MAAEC,EAAQ,GAAE,UAAEC,GAAY,EAAK,SAAEC,EAAW,EAAC,MAAEC,EAAQ,GAAGL,EACtH,MAAM,UAAEM,EAAS,YAAEC,IAAgBC,EAAAA,EAAAA,KAC7BC,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,KACDL,IACGH,GAAaI,GAAe,MAC5BK,YAAW,KACPH,EAASI,MAAM,UAAU,GAClB,IAARR,EAEX,GACD,CAACF,EAAWG,EAAWC,EAAaE,IAEvC,MAAMK,GAAWC,EAAAA,EAAAA,UAAQ,MACrBC,OAAQ,CACJC,QAAS,GAEbC,QAAS,CACLD,QAAS,EACTE,WAAY,CACRC,gBAAiBhB,EAAWF,EAAMmB,YAG1C,CAACpB,EAAOM,EAAaH,IAEzB,OACIkB,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAG,CACPC,UAAWC,EACXC,QAASlB,EACTmB,QAAQ,SACRd,SAAUA,EAASe,SAElB3B,EAAM4B,KAAI,CAACC,EAAIC,KACZC,EAAAA,EAAAA,MAACV,EAAAA,EAAOC,IAAG,CACPV,SAAU,CACNE,OAAQ,IACAf,EACA,CACIiC,YAAYC,EAAAA,EAAAA,IAAO,SAAU5B,GAC7B6B,aAAaD,EAAAA,EAAAA,IAAO,QAAS5B,GAC7BU,QAAS,GAEb,CACIiB,YAAYC,EAAAA,EAAAA,IAAO,QAAS5B,GAC5B6B,aAAaD,EAAAA,EAAAA,IAAO,SAAU5B,GAC9BU,QAAS,IAGrBC,QAAS,CACLD,QAAS,EACTiB,WAAY,IACZE,YAAa,IACbjB,WAAY,CACRf,SAAUA,EAAWF,EAAMmB,UAGrCQ,SAAA,EACFP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,KAChBJ,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAYG,SAAEE,MAFtBC,MAKP,EAIrB,GAAeK,EAAAA,EAAAA,MAAKtC,E","sources":["webpack://blocknite/./src/components/RoadMapText/style.module.scss?acaf","components/RoadMapText/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"info\":\"style_info__z43Q9\",\"dot\":\"style_dot__2VlH9\",\"text\":\"style_text__ha9qG\"};","import { memo, useEffect, useMemo } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { calcVW } from '../../utils/hooks/functions';\nimport { useStateProvider } from '../../context/state';\n\nimport styles from './style.module.scss';\n\ninterface RoadMapTextProps {\n    texts: string[];\n    right?: boolean;\n    isAnimate?: boolean;\n    duration?: number;\n    delay?: number;\n}\n\nconst RoadMapText: React.FC<RoadMapTextProps> = ({ right = false, texts = [], isAnimate = false, duration = 0, delay = 0 }) => {\n    const { scrolling, windowWidth } = useStateProvider();\n    const controls = useAnimation();\n\n    useEffect(() => {\n        if (!scrolling) {\n            if (isAnimate || windowWidth <= 576) {\n                setTimeout(() => {\n                    controls.start('visible');\n                }, delay * 1000)\n            }\n        }\n    }, [isAnimate, scrolling, windowWidth, controls]);\n\n    const variants = useMemo(() => ({\n        hidden: {\n            opacity: 0,\n        },\n        visible: {\n            opacity: 1,\n            transition: {\n                staggerChildren: duration / texts.length,\n            }\n        }\n    }), [right, windowWidth, duration]);\n\n    return (\n        <motion.div\n            className={styles.info}\n            animate={controls}\n            initial=\"hidden\"\n            variants={variants}\n        >\n            {texts.map((el, index) => (\n                <motion.div\n                    variants={{\n                        hidden: {\n                            ...(right ?\n                                {\n                                    marginLeft: calcVW('-100px', windowWidth),\n                                    marginRight: calcVW('100px', windowWidth),\n                                    opacity: 0\n                                } :\n                                {\n                                    marginLeft: calcVW('100px', windowWidth),\n                                    marginRight: calcVW('-100px', windowWidth),\n                                    opacity: 0\n                                }),\n                        },\n                        visible: {\n                            opacity: 1,\n                            marginLeft: '0',\n                            marginRight: '0',\n                            transition: {\n                                duration: duration / texts.length,\n                            }\n                        },\n                    }} key={index}>\n                    <div className={styles.dot} />\n                    <div className={styles.text}>{el}</div>\n                </motion.div>\n            ))}\n        </motion.div>\n    );\n};\n\nexport default memo(RoadMapText);\n"],"names":["RoadMapText","_ref","right","texts","isAnimate","duration","delay","scrolling","windowWidth","useStateProvider","controls","useAnimation","useEffect","setTimeout","start","variants","useMemo","hidden","opacity","visible","transition","staggerChildren","length","_jsx","motion","div","className","styles","animate","initial","children","map","el","index","_jsxs","marginLeft","calcVW","marginRight","memo"],"sourceRoot":""}