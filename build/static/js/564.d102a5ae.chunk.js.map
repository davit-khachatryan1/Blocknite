{"version":3,"file":"static/js/564.d102a5ae.chunk.js","mappings":"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","sources":["webpack://blocknite/./src/components/SixthScreen/style.module.scss?0abb","components/SixthScreen/index.tsx","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__vDDWV\",\"submit\":\"style_submit__miOLH\",\"inputBlock\":\"style_inputBlock__XvGXO\"};","import { lazy, memo, useEffect, useState, useCallback } from \"react\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useStateProvider } from \"../../context/state\";\nimport styles from \"./style.module.scss\";\n\nconst TitleBlock = lazy(() => import(\"../TitleBlock\"));\nconst FAQInput = lazy(() => import(\"../FAQInput\"));\nconst Button = lazy(() => import(\"../Button\"));\n\ninterface FAQItem {\n  title: string;\n  description: string;\n}\n\nconst FAQList: FAQItem[] = [\n  {\n    title: \"Why should I play Blocknite?\",\n    description:\n      \"You earn $NITE from playing our fantastic game! We have a lot of great features in the works that we are excited to show you, the earlier you start playing the quicker you level up your Treanin. Higher level Treanin receive more rewards and will put you in the best position to enjoy our future updates.\",\n  },\n  {\n    title: \"Is the total supply increasing?\",\n    description:\n      \"Yes! As you can see, 80% of our funds are allocated toward “Ecosystem”. These are tokens that will be slowly created over time and issued to our users as rewards for playing our game. Without minting, there is no game. Do not worry, only carefully built smart contracts are calling these mint functions, they are not open to anything else.\",\n  },\n  {\n    title: \"Is the team Doxxed?\",\n    description:\n      \"The team is not currently Doxxed. We would not feel comfortable launching our incredible game with overreaching governments breathing down our necks, so to launch smoothly we have decided to remain anonymous.\",\n  },\n  {\n    title: \"Do the team control the smart contracts?\",\n    description:\n      \"Yes. We love what we have built so far and we aspire to continue building, adding brand new features to keep you happy. As such, we are required to keep control of the contracts. As soon as we revoke ownership of the contracts, we become unable to add new features. We will not be keeping control of anything that we do not need to keep control of.\",\n  },\n];\n\nconst SixthScreen: React.FC = () => {\n  const { scrolling, windowWidth } = useStateProvider();\n  const [active, setActive] = useState<number>(0);\n  const enterAppControls = useAnimation();\n  const [refEnterApp, inViewEnterApp] = useInView({\n    triggerOnce: false,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    if (!scrolling && inViewEnterApp) {\n      enterAppControls.start(\"visible\");\n    }\n  }, [inViewEnterApp, scrolling, enterAppControls]);\n\n  const handleSetActive = useCallback((index: number) => {\n    setActive(index);\n  }, []);\n\n  return (\n    <div className={styles.container}>\n      <TitleBlock\n        title=\"frequently asked questions\"\n        secondTitle=\"FAQ\"\n        mobileClassName={windowWidth <= 576}\n        description=\"Lorem ipsum dolor sit amet consectetur. Et massa fusce eget mi molestie egestas.\"\n        withOutDescription={true}\n      />\n\n      <div className={styles.inputBlock}>\n        {FAQList.map((el, index) => (\n          <FAQInput\n            key={index}\n            title={el.title}\n            description={el.description}\n            index={index}\n            active={active}\n            setActive={handleSetActive}\n          />\n        ))}\n      </div>\n      <motion.div\n        className={styles.submit}\n        ref={refEnterApp}\n        animate={enterAppControls}\n        initial=\"hidden\"\n        variants={{\n          hidden: { opacity: 0 },\n          visible: {\n            opacity: 1,\n            transition: { duration: 0.75 },\n          },\n        }}\n      >\n        <Button\n          withIcon={true}\n          onClick={() => window.open(\"https://app.blocknite.io/\", \"_blank\")}\n        >\n          Enter app\n        </Button>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default memo(SixthScreen);\n","import { invariant } from '../../utils/errors.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["TitleBlock","lazy","FAQInput","Button","FAQList","title","description","SixthScreen","scrolling","windowWidth","useStateProvider","active","setActive","useState","enterAppControls","useAnimation","refEnterApp","inViewEnterApp","useInView","triggerOnce","threshold","useEffect","start","handleSetActive","useCallback","index","_jsxs","className","styles","children","_jsx","secondTitle","mobileClassName","withOutDescription","map","el","motion","div","ref","animate","initial","variants","hidden","opacity","visible","transition","duration","withIcon","onClick","window","open","memo","setVariants","visualElement","variantLabels","reverse","forEach","key","variant","getVariant","setTarget","variantChildren","child","animationControls","hasMounted","subscribers","Set","controls","subscribe","add","delete","definition","transitionOverride","invariant","animations","push","animateVisualElement","Promise","all","set","Array","isArray","setValues","stop","values","value","stopAnimation","mount","useConstant","useIsomorphicLayoutEffect","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","concat","root","has","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","entry","_a","inView","some","trackVisibility","isVisible","createObserver","callbacks","splice","indexOf","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}