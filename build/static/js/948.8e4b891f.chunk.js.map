{"version":3,"file":"static/js/948.8e4b891f.chunk.js","mappings":"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","sources":["webpack://blocknite/./src/components/FourthScreen/style.module.scss?209f","components/FourthScreen/index.tsx","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__mQGCQ\",\"mainTitleValue\":\"style_mainTitleValue__EsBaR\",\"value\":\"style_value__9AX2D\",\"title\":\"style_title__WW3+W\",\"titleBlock\":\"style_titleBlock__z+FoH\",\"infoBlock\":\"style_infoBlock__mSJx5\",\"content\":\"style_content__5DXCg\",\"eachBlock\":\"style_eachBlock__7cIVV\",\"info\":\"style_info__ONHmr\",\"lineBlock\":\"style_lineBlock__NIKDe\",\"dot\":\"style_dot__LobzP\",\"line\":\"style_line__TyFV1\",\"percent\":\"style_percent__X14FT\",\"motionSvg\":\"style_motionSvg__pHjTZ\"};","import { motion, useAnimation } from 'framer-motion';\nimport styles from './style.module.scss';\nimport { lazy, memo, useEffect, useRef, useState } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport { calcVW } from '../../utils/hooks/functions';\nimport { useStateProvider } from '../../context/state';\n\nconst TypeWriter = lazy(() => import(\"../TypeWriter\"));\n\nfunction polarToCartesian(centerX: number, centerY: number, radius: number, angleInDegrees: number) {\n    const angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n    return {\n        x: centerX + (radius * Math.cos(angleInRadians)),\n        y: centerY + (radius * Math.sin(angleInRadians))\n    };\n}\n\nfunction describeArc(x: number, y: number, radius: number, startAngle: number, endAngle: number) {\n    const start = polarToCartesian(x, y, radius, endAngle);\n    const end = polarToCartesian(x, y, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n    const d = [\n        \"M\", end.x, end.y,\n        \"A\", radius, radius, 0, largeArcFlag, 1, start.x, start.y\n    ].join(\" \");\n    return d;\n}\n\nconst FourthScreen = () => {\n    const { scrolling, windowWidth } = useStateProvider();\n\n    const strokeWidth = calcVW(108, windowWidth, 28.4);\n    const radius = calcVW(240, windowWidth, 80.6) as number;\n\n    const refMain = useRef(null);\n\n    const [refFirstBlock1, inViewFirstBlock1] = useInView({\n        triggerOnce: false,\n        threshold: 1,\n    });\n    const [refFirstBlock2, inViewFirstBlock2] = useInView({\n        triggerOnce: false,\n        threshold: 1,\n    });\n    const [refFirstBlock3, inViewFirstBlock3] = useInView({\n        triggerOnce: false,\n        threshold: 1,\n    });\n    const [refFirstBlock4, inViewFirstBlock4] = useInView({\n        triggerOnce: false,\n        threshold: 1,\n    });\n    const [titleRef, inViewTitle] = useInView({\n        triggerOnce: false,\n    });\n    const titleControls = useAnimation();\n    useEffect(() => {\n        if (!scrolling) {\n            if (inViewTitle) {\n                titleControls.start('visible')\n            }\n        }\n    }, [inViewTitle, scrolling])\n\n    const blockControls1 = useAnimation();\n    const blockControls2 = useAnimation();\n    const blockControls3 = useAnimation();\n    const blockControls4 = useAnimation();\n    const mainTitleValueControls = useAnimation();\n\n    const [percent1, title1, line1, dot1] = [useAnimation(), useAnimation(), useAnimation(), useAnimation()];\n    const [percent2, title2, line2, dot2] = [useAnimation(), useAnimation(), useAnimation(), useAnimation()];\n    const [percent3, title3, line3, dot3] = [useAnimation(), useAnimation(), useAnimation(), useAnimation()];\n    const [percent4, title4, line4, dot4] = [useAnimation(), useAnimation(), useAnimation(), useAnimation()];\n\n    const [animations, setAnimations] = useState(\n        {\n            first: {\n                percent: percent1,\n                title: title1,\n                line: line1,\n                dot: dot1,\n                isValue: false\n            },\n            second: {\n                percent: percent2,\n                title: title2,\n                line: line2,\n                dot: dot2,\n                isValue: false\n            },\n            third: {\n                percent: percent3,\n                title: title3,\n                line: line3,\n                dot: dot3,\n                isValue: false\n            },\n            fourth: {\n                percent: percent4,\n                title: title4,\n                line: line4,\n                dot: dot4,\n                isValue: false\n            }\n        }\n    )\n\n    const startAnimation = (control: any, animation: any, name: 'first' | 'second' | 'third' | 'fourth') => {\n        control.animate.start({\n            pathLength: 1,\n            transition: { duration: 1.5 }\n        })\n\n        animation.percent.start('visible')\n        animation.title.start('visible')\n        animation.line.start('visible')\n        animation.dot.start('visible')\n    }\n\n    const segments = {\n        Orange: {\n            color: '#C3A46550',\n            rotation: -50,\n            degrees: 270,\n            percent: '80%',\n            lineWidth: calcVW(800, windowWidth),\n            title: 'Ecosystem',\n            value: '2 000 000 000',\n            animate: blockControls1,\n            ref: refFirstBlock1,\n        },\n        Green: {\n            color: '#BF777B50',\n            rotation: 221.5,\n            degrees: 5,\n            percent: '10%',\n            lineWidth: calcVW(650, windowWidth),\n            title: 'Presale',\n            value: '250 000 000',\n            animate: blockControls4,\n            ref: refFirstBlock4,\n        },\n        Yellow: {\n            color: '#E3E1D950',\n            rotation: 228,\n            degrees: 38.5,\n            percent: '9%',\n            lineWidth: calcVW(650, windowWidth),\n            title: 'Liquidity',\n            value: '225 000 000',\n            animate: blockControls3,\n            ref: refFirstBlock3,\n        },\n        Red: {\n            color: '#A2B79550',\n            rotation: 268,\n            degrees: 40.5,\n            percent: '1%',\n            lineWidth: calcVW(690, windowWidth),\n            title: 'Airdrop',\n            value: '25 000 000',\n            animate: blockControls2,\n            ref: refFirstBlock2,\n        },\n    }\n\n    useEffect(() => {\n        const newAnimations = { ...animations };\n        if (!scrolling) {\n            if (inViewFirstBlock1) {\n                startAnimation(segments.Orange, animations.first, 'first')\n                newAnimations.first.isValue = true;\n            }\n\n            if (inViewFirstBlock2) {\n                startAnimation(segments.Green, animations.fourth, 'fourth')\n                newAnimations.fourth.isValue = true;\n            }\n\n            if (inViewFirstBlock3) {\n                startAnimation(segments.Yellow, animations.third, 'third')\n                newAnimations.third.isValue = true;\n            }\n\n            if (inViewFirstBlock4) {\n                startAnimation(segments.Red, animations.second, 'second')\n                newAnimations.second.isValue = true;\n                mainTitleValueControls.start('visible')\n            }\n\n            setAnimations(newAnimations)\n        }\n    }, [inViewFirstBlock1, inViewFirstBlock2, inViewFirstBlock3, inViewFirstBlock4, scrolling])\n\n\n    return (\n        <div className={styles.container} ref={refMain}>\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%', position: 'absolute', left: 0, top: 0, width: '100%' }}>\n                <motion.svg width={`${calcVW(595, windowWidth, 195)}`} height={`${calcVW(595, windowWidth, 195)}`} viewBox={`0 0 ${calcVW(595, windowWidth, 195)} ${calcVW(595, windowWidth, 195)}`} className={styles.motionSvg}>\n                    {Object.values(segments).map((segment, index) => (\n                        <motion.path\n                            key={index}\n                            fill=\"none\"\n                            strokeWidth={strokeWidth}\n                            stroke={segment.color}\n                            d={describeArc(calcVW(297.5, windowWidth, 97.5) as number, calcVW(297.5, windowWidth, 97.5) as number, radius, segment.rotation, segment.rotation + segment.degrees)}\n                            initial={{ pathLength: 0 }}\n                            animate={segment.animate}\n                            custom={index}\n                        />\n                    ))}\n                </motion.svg>\n                <motion.div\n                    className={styles.mainTitleValue}\n                    animate={mainTitleValueControls}\n                    initial=\"hidden\"\n                    variants={{\n                        hidden: { opacity: 0 },\n                        visible: {\n                            opacity: 1,\n                            transition: { duration: 0.8, delay: 1.5 }\n                        }\n                    }}\n                >\n                    <div className={styles.title}>Total supply</div>\n                    <div className={styles.value}>2 500 000 000 </div>\n                </motion.div>\n            </div>\n            <div className={styles.infoBlock}>\n                <motion.div className={styles.titleBlock}\n                    ref={titleRef}\n                    animate={titleControls}\n                    initial=\"hidden\"\n                    variants={{\n                        hidden: { opacity: 0, transform: `translateY(${calcVW('-25px', windowWidth)})` },\n                        visible: {\n                            opacity: 1,\n                            transform: 'translateY(0)',\n                            transition: { duration: 0.8 }\n                        }\n                    }}\n                >\n                    TOKENOMICS\n                </motion.div>\n                <div className={styles.content}>\n                    {Object.values(segments).map((segment, index) => (\n                        <div key={index} className={styles.eachBlock} ref={segment.ref}>\n                            <div className={styles.info}>\n                                <motion.div className={styles.percent}\n                                    animate={Object.values(animations)[index].percent}\n                                    initial=\"hidden\"\n                                    variants={{\n                                        hidden: { opacity: 0, fontSize: '0', marginRight: '0' },\n                                        visible: {\n                                            opacity: 1,\n                                            fontSize: calcVW('28px', windowWidth),\n                                            marginRight: calcVW('10px', windowWidth),\n                                            transition: { duration: 0.8, delay: 1.1 }\n                                        }\n                                    }}\n                                >{segment.percent}</motion.div>\n                                <motion.div\n                                    animate={Object.values(animations)[index].title}\n                                    initial=\"hidden\"\n                                    variants={{\n                                        hidden: { opacity: 0 },\n                                        visible: {\n                                            opacity: 1,\n                                            transition: { duration: 0.5, delay: 0.3 }\n                                        }\n                                    }}\n                                    className={styles.title}\n                                >{segment.title}</motion.div>\n                            </div>\n                            <div className={styles.lineBlock}>\n                                <motion.div\n                                    animate={Object.values(animations)[index].line}\n                                    initial=\"hidden\"\n                                    variants={{\n                                        hidden: { width: 0 },\n                                        visible: {\n                                            width: segment.lineWidth,\n                                            transition: { duration: 0.8, delay: 0.5 }\n                                        }\n                                    }}\n                                    className={styles.line} style={{ width: segment.lineWidth }} />\n                                <motion.div className={styles.dot}\n                                    animate={Object.values(animations)[index].dot}\n                                    initial=\"hidden\"\n                                    variants={{\n                                        hidden: { width: 0, height: 0 },\n                                        visible: {\n                                            width: calcVW(8, windowWidth), height: calcVW(8, windowWidth),\n                                            transition: { duration: 0.1, delay: 1 }\n                                        }\n                                    }}\n                                />\n                            </div>\n                            <div className={styles.value}>\n                                {Object.values(animations)[index].isValue &&\n                                    <TypeWriter text={segment.value} classname=\"value\" time={500} delay={500} />\n                                }\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(FourthScreen)","import { invariant } from '../../utils/errors.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["TypeWriter","lazy","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","describeArc","startAngle","endAngle","start","end","largeArcFlag","join","FourthScreen","scrolling","windowWidth","useStateProvider","strokeWidth","calcVW","refMain","useRef","refFirstBlock1","inViewFirstBlock1","useInView","triggerOnce","threshold","refFirstBlock2","inViewFirstBlock2","refFirstBlock3","inViewFirstBlock3","refFirstBlock4","inViewFirstBlock4","titleRef","inViewTitle","titleControls","useAnimation","useEffect","blockControls1","blockControls2","blockControls3","blockControls4","mainTitleValueControls","percent1","title1","line1","dot1","percent2","title2","line2","dot2","percent3","title3","line3","dot3","percent4","title4","line4","dot4","animations","setAnimations","useState","first","percent","title","line","dot","isValue","second","third","fourth","startAnimation","control","animation","name","animate","pathLength","transition","duration","segments","Orange","color","rotation","degrees","lineWidth","value","ref","Green","Yellow","Red","newAnimations","_jsxs","className","styles","children","style","display","justifyContent","alignItems","height","position","left","top","width","_jsx","motion","svg","concat","viewBox","Object","values","map","segment","index","path","fill","stroke","d","initial","custom","div","variants","hidden","opacity","visible","delay","transform","fontSize","marginRight","text","classname","time","memo","setVariants","visualElement","variantLabels","reverse","forEach","key","variant","getVariant","setTarget","variantChildren","child","animationControls","hasMounted","subscribers","Set","controls","subscribe","add","delete","definition","transitionOverride","invariant","push","animateVisualElement","Promise","all","set","Array","isArray","setValues","stop","stopAnimation","mount","useConstant","useIsomorphicLayoutEffect","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","keys","sort","filter","root","has","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","entry","_a","inView","some","trackVisibility","isVisible","createObserver","callbacks","splice","indexOf","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}