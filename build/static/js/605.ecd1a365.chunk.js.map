{"version":3,"file":"static/js/605.ecd1a365.chunk.js","mappings":"6MACA,QAA4B,yBAA5B,EAAkE,0BAAlE,EAAoG,qBAApG,EAAmI,uBAAnI,EAAuK,0BAAvK,EAAuM,mBAAvM,EAAsO,yBAAtO,EAA6Q,2BAA7Q,EAAmT,wBAAnT,EAAkV,oBAAlV,EAAiX,wBAAjX,EAAqZ,yBAArZ,EAAic,gCAAjc,EAA8e,0B,aCQ9e,MAAMA,GAAcC,EAAAA,EAAAA,OAAK,IAAM,gCACzBC,GAAcD,EAAAA,EAAAA,OAAK,IAAM,gCAEzBE,EAAcA,KAChB,MAAM,UAAEC,EAAS,YAAEC,IAAgBC,EAAAA,EAAAA,MAC5BC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCC,GAAgBC,EAAAA,EAAAA,KAChBC,GAAeD,EAAAA,EAAAA,KACfE,GAAmBF,EAAAA,EAAAA,MAClBG,EAAUC,IAAeC,EAAAA,EAAAA,IAAU,CAAEC,aAAa,KAClDC,EAAcC,IAAmBH,EAAAA,EAAAA,IAAU,CAAEC,aAAa,IAE3DG,GAAiBC,EAAAA,EAAAA,UAAQ,MAC3BC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,EAChBC,SAAUP,EACVQ,cAAe,IACfC,WAAWC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,gCAAgCC,QAAQ,OAAOC,IAAI,SACvEC,WAAWJ,EAAAA,EAAAA,KAAA,OAAKC,IAAI,+BAA+BC,QAAQ,OAAOC,IAAI,gBACtE,CAACb,IAECe,EAAgB,EAAClB,EAAAA,EAAAA,IAAU,CAAEC,aAAa,EAAOkB,UAAW,KAAMnB,EAAAA,EAAAA,IAAU,CAAEC,aAAa,EAAOkB,UAAW,KAAMnB,EAAAA,EAAAA,IAAU,CAAEC,aAAa,EAAOkB,UAAW,KAAMnB,EAAAA,EAAAA,IAAU,CAAEC,aAAa,EAAOkB,UAAW,KA6BrN,OA3BAC,EAAAA,EAAAA,YAAU,KACDhC,GACGW,IACAL,EAAc2B,MAAM,WACpBxB,EAAiBwB,MAAM,WAE/B,GACD,CAACtB,EAAaX,EAAWM,EAAeG,KAE3CuB,EAAAA,EAAAA,YAAU,KACN,IAAKhC,EAAW,CACM8B,EAAcI,MAAKC,IAAA,IAAEC,EAAGC,GAAOF,EAAA,OAAKE,CAAM,MAC1ClC,IACdC,GAAW,GACXI,EAAayB,MAAM,CACfK,OAAQ,EAACC,EAAAA,EAAAA,IAAO,OAAQtC,IAAcsC,EAAAA,EAAAA,IAAO,QAAStC,IAAcsC,EAAAA,EAAAA,IAAO,QAAStC,IAAcsC,EAAAA,EAAAA,IAAO,QAAStC,IAAcsC,EAAAA,EAAAA,IAAO,QAAStC,IAChJuC,WAAY,CACRC,SAAU,EACVC,MAAO,CAAC,EAAG,GAAK,GAAK,GAAK,GAAK,GAC/BC,KAAM,YACNC,MAAO,MAIvB,IACD,CAACd,EAAe9B,EAAWG,EAASK,EAAcP,EAAaO,KAG9DqC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAkBC,IAAKtC,EAASuC,SAAA,EAC5CxB,EAAAA,EAAAA,KAAA,OAAKqB,UAAWC,EAAkBE,UAC9BJ,EAAAA,EAAAA,MAACK,EAAAA,EAAOC,IAAG,CAACL,UAAWC,EACnBK,QAAS9C,EACT+C,QAAS,CAAEC,WAAY,SACvBC,SAAU,CACNC,OAAQ,CAAEF,WAAY,QAASG,QAAS,GACxCC,QAAS,CACLJ,WAAY,IACZG,QAAS,GACTjB,WAAY,CAAEC,SAAU,MAE9BQ,SAAA,EACFxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAOS,IAAG,CAACjC,IAAI,sBAAsBE,IAAI,WAAWkB,UAAWC,EAC5DK,QAAS3C,EACT4C,QAAS,CAAEC,WAAY,SACvBC,SAAU,CACNC,OAAQ,CAAEI,MAAO,IAAKtB,OAAQ,KAC9BoB,QAAS,CACLE,OAAOrB,EAAAA,EAAAA,IAAO,OAAQtC,GAAcqC,QAAQC,EAAAA,EAAAA,IAAO,OAAQtC,GAC3DuC,WAAY,CAAEC,SAAU,GAAKG,MAAO,QAEvC,WAETnB,EAAAA,EAAAA,KAACyB,EAAAA,EAAOS,IAAG,CAACjC,IAAI,sBAAsBE,IAAI,WAAWkB,UAAWC,EAC5DK,QAAS3C,EACT4C,QAAS,CAAEC,WAAY,SACvBC,SAAU,CACNC,OAAQ,CAAEI,MAAO,IAAKtB,OAAQ,KAC9BoB,QAAS,CACLE,OAAOrB,EAAAA,EAAAA,IAAO,OAAQtC,GAAcqC,QAAQC,EAAAA,EAAAA,IAAO,OAAQtC,GAC3DuC,WAAY,CAAEC,SAAU,GAAKG,MAAO,cAKxDnB,EAAAA,EAAAA,KAACyB,EAAAA,EAAOC,IAAG,CAACL,UAAWC,EACnBC,IAAKtC,EACL0C,QAAS9C,EACT+C,QAAQ,SACRE,SAAU,CACNC,OAAQ,CAAEC,QAAS,EAAGI,UAAU,cAADC,QAAgBvB,EAAAA,EAAAA,IAAO,QAAStC,GAAY,MAC3EyD,QAAS,CACLD,QAAS,EACTI,UAAW,gBACXrB,WAAY,CAAEC,SAAU,MAE9BQ,SACL,aAGDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAWE,SAAA,EACvBxB,EAAAA,EAAAA,KAAA,OAAKqB,UAAWC,EAAmBE,SAC9BnB,EAAciC,MAAM,EAAG,GAAGC,KAAI,CAAAC,EAAgBC,KAAC,IAAflB,EAAKX,GAAO4B,EAAA,OACzCpB,EAAAA,EAAAA,MAAA,OAAaC,UAAWC,EAAiBC,IAAKA,EAAIC,SAAA,EAC9CxB,EAAAA,EAAAA,KAAC7B,EAAW,CAACuE,MAAa,IAAND,EAAU,aAAe,aACzCE,UAAW/B,EAAQI,SAAU,GAAKG,MAAW,IAAJsB,KAC7CzC,EAAAA,EAAAA,KAAA,OAAKqB,UAAWC,EAAYE,UACxBxB,EAAAA,EAAAA,KAAC3B,EAAW,CACRsE,UAAW/B,EACXI,SAAU,EACVG,MAAW,IAAJsB,EAAU,GACjBG,MAAa,IAANH,EAAU,CACb,uBACA,4CACA,6BACA,sCACA,CACA,oCACA,8BACA,sDACA,mCAjBNA,EAqBJ,OAGdzC,EAAAA,EAAAA,KAACyB,EAAAA,EAAOC,IAAG,CAACL,UAAWC,EACnBK,QAAS5C,EACT6C,QAAS,CAAEf,OAAQ,KAAMW,UAEzBxB,EAAAA,EAAAA,KAAA,OAAKC,IAAI,sBAAsBE,IAAI,OAAOkB,UAAWC,EAAiBpB,QAAQ,YAElFF,EAAAA,EAAAA,KAAA,OAAKqB,UAAWC,EAAmBE,SAC9BnB,EAAciC,MAAM,GAAGC,KAAI,CAAAM,EAAgBJ,KAAC,IAAflB,EAAKX,GAAOiC,EAAA,OACtCzB,EAAAA,EAAAA,MAAA,OAAiBC,UAAWC,EAAiBC,IAAKA,EAAIC,SAAA,EAClDxB,EAAAA,EAAAA,KAAC7B,EAAW,CAACuE,MAAa,IAAND,EAAU,SAAW,aAAcK,OAAO,EAC1DH,UAAW/B,EAAQI,SAAU,GAAKG,MAAW,IAAJsB,EAAU,MACvDzC,EAAAA,EAAAA,KAAA,OAAKqB,UAAWC,EAAYE,UACxBxB,EAAAA,EAAAA,KAAC3B,EAAW,CACRsE,UAAW/B,EACXI,SAAU,EACVG,MAAW,IAAJsB,EAAU,GACjBK,OAAO,EACPF,MAAa,IAANH,EAAU,CACb,+BACA,sBACA,6BACA,+CACA,CACA,yCACA,0BACA,0BACA,4BACA,wCAnBNA,EAAI,EAuBR,UAIlBzC,EAAAA,EAAAA,KAAA,OAAKqB,UAAWC,EAAkBC,IAAKlC,EAAamC,UAChDxB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,IAAKxD,EAAciC,SACrB,CAAC,aAAc,SAAU,aAAc,cAAce,KAAI,CAACG,EAAOD,KAC9DrB,EAAAA,EAAAA,MAAA,OAAaC,UAAWC,EAAkBE,SAAA,EACtCxB,EAAAA,EAAAA,KAAC7B,EAAW,CAACuE,MAAOA,EAAOM,MAAa,IAANP,EAAU,cAAsB,IAANA,EAAU,aAAe,UACrFzC,EAAAA,EAAAA,KAAA,OAAKqB,UAAWC,EAAYE,UACxBxB,EAAAA,EAAAA,KAAC3B,EAAW,CACRyE,MAAOL,EAAI,IAAM,EACjBG,MAAa,IAANH,EAAU,CACb,uBACA,4CACA,6BACA,sCACM,IAANA,EAAU,CACV,+BACA,sBACA,6BACA,+CACM,IAANA,EAAU,CACV,oCACA,8BACA,sDACA,6BACA,CACA,yCACA,0BACA,0BACA,4BACA,wCAzBNA,WAiCpB,EAId,GAAeQ,EAAAA,EAAAA,MAAK3E,E,8MCrNd4E,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEC,QAA2D,IAAnDL,EAAQK,KAElBvB,KAAKuB,IACJ,MAAO,GAAPzB,OAAUyB,EAAG,KAAAzB,OACH,SAARyB,GArBWC,EAsBGN,EAAQM,OApBxBX,EAAQY,IAAID,KAChBT,GAAU,EACVF,EAAQa,IAAIF,EAAMT,EAAOY,aAFKd,EAAQe,IAAIJ,IADxB,IAsBRN,EAAQK,IAvBpB,IAAmBC,CAwBb,IAEDG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAb,EAAAc,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCG,EAAAH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAiBhB,EAEjB,GACyC,qBAAhCoB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASR,EAAQS,wBAWvB,OAVAR,EAASI,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQX,EACRY,kBAC+B,kBAAtBxB,EAAQnD,UAAyBmD,EAAQnD,UAAY,EAC9D4E,KAAM,EACNC,mBAAoBN,EACpBO,iBAAkBP,EAClBQ,WAAYR,IAEP,MAGT,CAEA,MAAM,GAAES,EAAA,SAAIC,EAAA,SAAUC,GApFxB,SAAwB/B,GAEtB,MAAM6B,EAAK9B,EAAYC,GACvB,IAAIgC,EAAWvC,EAAYiB,IAAImB,GAE/B,IAAKG,EAAU,CAEb,MAAMD,EAAW,IAAIrC,IAErB,IAAIuC,EAEJ,MAAMH,EAAW,IAAIX,sBAAsBe,IACzCA,EAAQC,SAASC,IAvEvB,IAAAC,EA0EQ,MAAMlF,EACJiF,EAAMd,gBACNW,EAAWjF,MAAMH,GAAcuF,EAAMZ,mBAAqB3E,IAGxDmD,EAAQsC,iBAA8C,qBAApBF,EAAMG,YAG1CH,EAAMG,UAAYpF,GAGpB,OAAAkF,EAAAN,EAASrB,IAAI0B,EAAMb,UAAnBc,EAA4BF,SAAStB,IACnCA,EAAS1D,EAAQiF,EAAM,GACvB,GACF,GACDpC,GAGHiC,EACEH,EAASG,aACRO,MAAMC,QAAQzC,EAAQnD,WACnBmD,EAAQnD,UACR,CAACmD,EAAQnD,WAAa,IAE5BmF,EAAW,CACTH,KACAC,WACAC,YAGFtC,EAAYe,IAAIqB,EAAIG,EACtB,CAEA,OAAOA,CACT,CAmCqCU,CAAe1C,GAG5C2C,EAAYZ,EAASrB,IAAIE,IAAY,GAQ3C,OAPKmB,EAASxB,IAAIK,IAChBmB,EAASvB,IAAII,EAAS+B,GAGxBA,EAAUC,KAAK/B,GACfiB,EAASnB,QAAQC,GAEV,WAEL+B,EAAUE,OAAOF,EAAUG,QAAQjC,GAAW,GAErB,IAArB8B,EAAU5B,SAEZgB,EAASgB,OAAOnC,GAChBkB,EAASkB,UAAUpC,IAGC,IAAlBmB,EAASkB,OAEXnB,EAASoB,aACTzD,EAAYsD,OAAOlB,GAEvB,CACF,CC1GkCsB,EAAAA,UC7B3B,SAASzH,IAWiC,IAXvB,UACxBmB,EAAA,MACAa,EAAA,gBACA4E,EAAA,WACAc,EAAA9C,KACAA,EAAA,YACA3E,EAAA,KACA0H,EAAA,cACAC,EAAA,eACArC,EAAA,SACAsC,GACFzC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAuB,EA+CE,MAAOvE,EAAK0F,GAAgBC,EAAAA,SAAyB,MAC/C5C,EAAiB4C,EAAAA,UAChBC,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9CtG,SAAUmG,EACVlB,WAAO,IAKTvB,EAAS+C,QAAUL,EAGbE,EAAAA,WACJ,KAEE,GAAIJ,IAASvF,EAAK,OAElB,IAAIkF,EA4BJ,OA3BAA,EAAYrC,EACV7C,GACA,CAACX,EAAQiF,KACPuB,EAAS,CACPxG,SACAiF,UAEEvB,EAAS+C,SAAS/C,EAAS+C,QAAQzG,EAAQiF,GAE3CA,EAAMd,gBAAkB3F,GAAeqH,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE1C,OACA8C,aACAvG,YAEAyF,kBAEA5E,SAEFuD,GAGK,KACD+B,GACFA,GACF,CACD,GAIH,CAEER,MAAMC,QAAQ5F,GAAaA,EAAU4D,WAAa5D,EAClDiB,EACAwC,EACA8C,EACAzH,EACA0H,EACAf,EACArB,EACAvD,IAIJ,MAAMmG,EAAc,OAAAxB,EAAAqB,EAAMtB,YAAN,EAAAC,EAAad,OAC3BuC,EAA4BL,EAAAA,SAE/B3F,IACD+F,GACClI,GACA0H,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACPxG,SAAUmG,EACVlB,WAAO,KAIX,MAAM2B,EAAS,CAACP,EAAQE,EAAMvG,OAAQuG,EAAMtB,OAO5C,OAJA2B,EAAOjG,IAAMiG,EAAO,GACpBA,EAAO5G,OAAS4G,EAAO,GACvBA,EAAO3B,MAAQ2B,EAAO,GAEfA,CACT,C","sources":["webpack://blocknite/./src/components/FifthScreen/style.module.scss?7c52","components/FifthScreen/index.tsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__vdbX9\",\"titleBlock\":\"style_titleBlock__Rk8cm\",\"title\":\"style_title__ipudm\",\"iconTop\":\"style_iconTop__1WG5K\",\"iconBottom\":\"style_iconBottom__+ZAhv\",\"map\":\"style_map__JgwGz\",\"lineBlock\":\"style_lineBlock__BxU7a\",\"infoElement\":\"style_infoElement__wWtcs\",\"oneBlock\":\"style_oneBlock__5PiEj\",\"info\":\"style_info__sItNo\",\"mainLine\":\"style_mainLine__6YKUR\",\"mapMobile\":\"style_mapMobile__5u5OU\",\"titleBlockMobile\":\"style_titleBlockMobile__tUXja\",\"cardMobile\":\"style_cardMobile__Gcjm7\"};","import { lazy, memo, useEffect, useState, useMemo } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport Slider from 'react-slick';\nimport { motion, useAnimation } from 'framer-motion';\nimport { calcVW } from '../../utils/hooks/functions';\nimport { useStateProvider } from '../../context/state';\n\nimport styles from './style.module.scss';\n\nconst RoadMapCard = lazy(() => import('../RoadMapCard'));\nconst RoadMapText = lazy(() => import('../RoadMapText'));\n\nconst FifthScreen = () => {\n    const { scrolling, windowWidth } = useStateProvider();\n    const [started, setStarted] = useState(false);\n    const titleControls = useAnimation();\n    const lineControls = useAnimation();\n    const titleImgControls = useAnimation();\n    const [titleRef, inViewTitle] = useInView({ triggerOnce: false });\n    const [mobileMapRef, inViewMobileMap] = useInView({ triggerOnce: false });\n\n    const sliderSettings = useMemo(() => ({\n        infinite: false,\n        speed: 500,\n        slidesToShow: 1,\n        slidesToScroll: 1,\n        autoplay: inViewMobileMap,\n        autoplaySpeed: 7000,\n        nextArrow: <img src='/icons/arrow-right-slider.svg' loading='lazy' alt=\"Next\" />,\n        prevArrow: <img src='/icons/arrow-left-slider.svg' loading='lazy' alt=\"Previous\" />,\n    }), [inViewMobileMap]);\n\n    const animationRefs = [useInView({ triggerOnce: false, threshold: 1 }), useInView({ triggerOnce: false, threshold: 1 }), useInView({ triggerOnce: false, threshold: 1 }), useInView({ triggerOnce: false, threshold: 1 })];\n\n    useEffect(() => {\n        if (!scrolling) {\n            if (inViewTitle) {\n                titleControls.start('visible');\n                titleImgControls.start('visible');\n            }\n        }\n    }, [inViewTitle, scrolling, titleControls, titleImgControls]);\n\n    useEffect(() => {\n        if (!scrolling) {\n            const anyInView = animationRefs.some(([_, inView]) => inView);\n            if (anyInView && !started) {\n                setStarted(true);\n                lineControls.start({\n                    height: [calcVW('60px', windowWidth), calcVW('191px', windowWidth), calcVW('398px', windowWidth), calcVW('553px', windowWidth), calcVW('732px', windowWidth)],\n                    transition: {\n                        duration: 2,\n                        times: [0, 0.2, 0.4, 0.6, 0.8, 1],\n                        ease: \"easeInOut\",\n                        delay: 0.2\n                    }\n                });\n            }\n        }\n    }, [animationRefs, scrolling, started, lineControls, windowWidth, lineControls]);\n\n    return (\n        <div className={styles.container} ref={titleRef}>\n            <div className={styles.titleBlock}>\n                <motion.div className={styles.title}\n                    animate={titleControls}\n                    initial={{ marginLeft: '-100%' }}\n                    variants={{\n                        hidden: { marginLeft: '-100%', opacity: 0 },\n                        visible: {\n                            marginLeft: \"0\",\n                            opacity: 0.8,\n                            transition: { duration: 0.8 }\n                        }\n                    }}>\n                    <motion.img src=\"/icons/subtract.svg\" alt=\"subtract\" className={styles.iconTop}\n                        animate={titleImgControls}\n                        initial={{ marginLeft: '-100%' }}\n                        variants={{\n                            hidden: { width: '0', height: '0' },\n                            visible: {\n                                width: calcVW('34px', windowWidth), height: calcVW('34px', windowWidth),\n                                transition: { duration: 0.3, delay: 0.8 }\n                            }\n                        }} />\n                    Roadmap\n                    <motion.img src=\"/icons/subtract.svg\" alt=\"subtract\" className={styles.iconBottom}\n                        animate={titleImgControls}\n                        initial={{ marginLeft: '-100%' }}\n                        variants={{\n                            hidden: { width: '0', height: '0' },\n                            visible: {\n                                width: calcVW('34px', windowWidth), height: calcVW('34px', windowWidth),\n                                transition: { duration: 0.3, delay: 0.8 }\n                            }\n                        }} />\n                </motion.div>\n            </div>\n            <motion.div className={styles.titleBlockMobile}\n                ref={titleRef}\n                animate={titleControls}\n                initial=\"hidden\"\n                variants={{\n                    hidden: { opacity: 0, transform: `translateY(${calcVW('-25px', windowWidth)})` },\n                    visible: {\n                        opacity: 1,\n                        transform: 'translateY(0)',\n                        transition: { duration: 0.8 }\n                    }\n                }}\n            >\n                Roadmap\n            </motion.div>\n            <div className={styles.map}>\n                <div className={styles.infoElement}>\n                    {animationRefs.slice(0, 2).map(([ref, inView], i) => (\n                        <div key={i} className={styles.oneBlock} ref={ref}>\n                            <RoadMapCard title={i === 0 ? 'Pre-Launch' : 'Activation'}\n                                isAnimate={inView} duration={0.2} delay={i * 1.2} />\n                            <div className={styles.info}>\n                                <RoadMapText\n                                    isAnimate={inView}\n                                    duration={1}\n                                    delay={i * 1.2 + 0.2}\n                                    texts={i === 0 ? [\n                                        'Launch social medias',\n                                        'Develop the Blocknite landing page & dapp',\n                                        'Create listing on PinkSale',\n                                        'Audit & launch our smart contracts'\n                                    ] : [\n                                        'Launch on PancakeSwap & CoinGecko',\n                                        'Launch our innovative dapp!',\n                                        'Kick-off our gaming ecosystem with Treanin creation',\n                                        'Begin airdrop competition'\n                                    ]}\n                                />\n                            </div>\n                        </div>\n                    ))}\n                </div>\n                <motion.div className={styles.lineBlock}\n                    animate={lineControls}\n                    initial={{ height: '0' }}\n                >\n                    <img src=\"/icons/map-line.svg\" alt=\"line\" className={styles.mainLine} loading='lazy' />\n                </motion.div>\n                <div className={styles.infoElement}>\n                    {animationRefs.slice(2).map(([ref, inView], i) => (\n                        <div key={i + 2} className={styles.oneBlock} ref={ref}>\n                            <RoadMapCard title={i === 0 ? 'Launch' : 'Enrichment'} right={true}\n                                isAnimate={inView} duration={0.2} delay={i * 1.2 + 0.6} />\n                            <div className={styles.info}>\n                                <RoadMapText\n                                    isAnimate={inView}\n                                    duration={1}\n                                    delay={i * 1.2 + 0.8}\n                                    right={true}\n                                    texts={i === 0 ? [\n                                        'Launch our Trailer & socials',\n                                        'Contact influencers',\n                                        'Create listing on PinkSale',\n                                        'Select presale whitelist from our community'\n                                    ] : [\n                                        'Add new items (FuseStone, NameStone..)',\n                                        'Add new Orgurin enemies',\n                                        'Add amazing boss fights',\n                                        'Discuss listing with CEXs',\n                                        'Grow team to add more features'\n                                    ]}\n                                />\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </div>\n            <div className={styles.mapMobile} ref={mobileMapRef}>\n                <Slider {...sliderSettings}>\n                    {['Pre-Launch', 'Launch', 'Activation', 'Enrichment'].map((title, i) => (\n                        <div key={i} className={styles.cardMobile}>\n                            <RoadMapCard title={title} first={i === 0 ? 'first-short' : i === 3 ? 'last-short' : 'long'} />\n                            <div className={styles.info}>\n                                <RoadMapText\n                                    right={i % 2 === 1}\n                                    texts={i === 0 ? [\n                                        'Launch social medias',\n                                        'Develop the Blocknite landing page & dapp',\n                                        'Create listing on PinkSale',\n                                        'Audit & launch our smart contracts'\n                                    ] : i === 1 ? [\n                                        'Launch our Trailer & socials',\n                                        'Contact influencers',\n                                        'Create listing on PinkSale',\n                                        'Select presale whitelist from our community'\n                                    ] : i === 2 ? [\n                                        'Launch on PancakeSwap & CoinGecko',\n                                        'Launch our innovative dapp!',\n                                        'Kick-off our gaming ecosystem with Treanin creation',\n                                        'Begin airdrop competition'\n                                    ] : [\n                                        'Add new items (FuseStone, NameStone..)',\n                                        'Add new Orgurin enemies',\n                                        'Add amazing boss fights',\n                                        'Discuss listing with CEXs',\n                                        'Grow team to add more features'\n                                    ]}\n                                />\n                            </div>\n                        </div>\n                    ))}\n                </Slider>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(FifthScreen);\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["RoadMapCard","lazy","RoadMapText","FifthScreen","scrolling","windowWidth","useStateProvider","started","setStarted","useState","titleControls","useAnimation","lineControls","titleImgControls","titleRef","inViewTitle","useInView","triggerOnce","mobileMapRef","inViewMobileMap","sliderSettings","useMemo","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","nextArrow","_jsx","src","loading","alt","prevArrow","animationRefs","threshold","useEffect","start","some","_ref","_","inView","height","calcVW","transition","duration","times","ease","delay","_jsxs","className","styles","ref","children","motion","div","animate","initial","marginLeft","variants","hidden","opacity","visible","img","width","transform","concat","slice","map","_ref2","i","title","isAnimate","texts","_ref3","right","Slider","first","memo","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}