{"version":3,"file":"static/js/331.e845fe4c.chunk.js","mappings":"yLACA,QAAuB,oBAAvB,EAAiD,mBAAjD,EAA2E,oB,aCc3E,MAAMA,EAA0CC,IAAgF,IAA/E,MAAEC,GAAQ,EAAK,MAAEC,EAAQ,GAAE,UAAEC,GAAY,EAAK,SAAEC,EAAW,EAAC,MAAEC,EAAQ,GAAGL,EACtH,MAAM,UAAEM,EAAS,YAAEC,IAAgBC,EAAAA,EAAAA,KAC7BC,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,KACDL,IACGH,GAAaI,GAAe,MAC5BK,YAAW,KACPH,EAASI,MAAM,UAAU,GAClB,IAARR,EAEX,GACD,CAACF,EAAWG,EAAWC,EAAaE,IAEvC,MAAMK,GAAWC,EAAAA,EAAAA,UAAQ,MACrBC,OAAQ,CACJC,QAAS,GAEbC,QAAS,CACLD,QAAS,EACTE,WAAY,CACRC,gBAAiBhB,EAAWF,EAAMmB,YAG1C,CAACpB,EAAOM,EAAaH,IAEzB,OACIkB,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAG,CACPC,UAAWC,EACXC,QAASlB,EACTmB,QAAQ,SACRd,SAAUA,EAASe,SAElB3B,EAAM4B,KAAI,CAACC,EAAIC,KACZC,EAAAA,EAAAA,MAACV,EAAAA,EAAOC,IAAG,CACPV,SAAU,CACNE,OAAQ,IACAf,EACA,CACIiC,YAAYC,EAAAA,EAAAA,IAAO,SAAU5B,GAC7B6B,aAAaD,EAAAA,EAAAA,IAAO,QAAS5B,GAC7BU,QAAS,GAEb,CACIiB,YAAYC,EAAAA,EAAAA,IAAO,QAAS5B,GAC5B6B,aAAaD,EAAAA,EAAAA,IAAO,SAAU5B,GAC9BU,QAAS,IAGrBC,QAAS,CACLD,QAAS,EACTiB,WAAY,IACZE,YAAa,IACbjB,WAAY,CACRf,SAAUA,EAAWF,EAAMmB,UAGrCQ,SAAA,EACFP,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,KAChBJ,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAYG,SAAEE,MAFtBC,MAKP,EAIrB,GAAeK,EAAAA,EAAAA,MAAKtC,E","sources":["webpack://blocknite/./src/components/RoadMapText/style.module.scss?acaf","components/RoadMapText/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"info\":\"style_info__fjdwv\",\"dot\":\"style_dot__uiJSF\",\"text\":\"style_text__ghekZ\"};","import { memo, useEffect, useMemo } from 'react';\r\nimport { motion, useAnimation } from 'framer-motion';\r\nimport { calcVW } from '../../utils/hooks/functions';\r\nimport { useStateProvider } from '../../context/state';\r\n\r\nimport styles from './style.module.scss';\r\n\r\ninterface RoadMapTextProps {\r\n    texts: string[];\r\n    right?: boolean;\r\n    isAnimate?: boolean;\r\n    duration?: number;\r\n    delay?: number;\r\n}\r\n\r\nconst RoadMapText: React.FC<RoadMapTextProps> = ({ right = false, texts = [], isAnimate = false, duration = 0, delay = 0 }) => {\r\n    const { scrolling, windowWidth } = useStateProvider();\r\n    const controls = useAnimation();\r\n\r\n    useEffect(() => {\r\n        if (!scrolling) {\r\n            if (isAnimate || windowWidth <= 576) {\r\n                setTimeout(() => {\r\n                    controls.start('visible');\r\n                }, delay * 1000)\r\n            }\r\n        }\r\n    }, [isAnimate, scrolling, windowWidth, controls]);\r\n\r\n    const variants = useMemo(() => ({\r\n        hidden: {\r\n            opacity: 0,\r\n        },\r\n        visible: {\r\n            opacity: 1,\r\n            transition: {\r\n                staggerChildren: duration / texts.length,\r\n            }\r\n        }\r\n    }), [right, windowWidth, duration]);\r\n\r\n    return (\r\n        <motion.div\r\n            className={styles.info}\r\n            animate={controls}\r\n            initial=\"hidden\"\r\n            variants={variants}\r\n        >\r\n            {texts.map((el, index) => (\r\n                <motion.div\r\n                    variants={{\r\n                        hidden: {\r\n                            ...(right ?\r\n                                {\r\n                                    marginLeft: calcVW('-100px', windowWidth),\r\n                                    marginRight: calcVW('100px', windowWidth),\r\n                                    opacity: 0\r\n                                } :\r\n                                {\r\n                                    marginLeft: calcVW('100px', windowWidth),\r\n                                    marginRight: calcVW('-100px', windowWidth),\r\n                                    opacity: 0\r\n                                }),\r\n                        },\r\n                        visible: {\r\n                            opacity: 1,\r\n                            marginLeft: '0',\r\n                            marginRight: '0',\r\n                            transition: {\r\n                                duration: duration / texts.length,\r\n                            }\r\n                        },\r\n                    }} key={index}>\r\n                    <div className={styles.dot} />\r\n                    <div className={styles.text}>{el}</div>\r\n                </motion.div>\r\n            ))}\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default memo(RoadMapText);\r\n"],"names":["RoadMapText","_ref","right","texts","isAnimate","duration","delay","scrolling","windowWidth","useStateProvider","controls","useAnimation","useEffect","setTimeout","start","variants","useMemo","hidden","opacity","visible","transition","staggerChildren","length","_jsx","motion","div","className","styles","animate","initial","children","map","el","index","_jsxs","marginLeft","calcVW","marginRight","memo"],"sourceRoot":""}