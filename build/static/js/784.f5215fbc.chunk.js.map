{"version":3,"file":"static/js/784.f5215fbc.chunk.js","mappings":"iJACA,QAA4B,yB,iCCI5B,MAAMA,GAASC,EAAAA,EAAAA,OAAK,IAAM,+BACpBC,GAASD,EAAAA,EAAAA,OAAK,IAAM,+BAEpBE,EAAkBA,KACtB,MAAM,WAAEC,EAAU,aAAEC,EAAY,cAAEC,EAAa,YAAEC,IAAgBC,EAAAA,EAAAA,KAC3DC,GAAQC,EAAAA,EAAAA,QAA8B,MAEtCC,GAAcC,EAAAA,EAAAA,cAAY,KAC9B,MAAMC,GAAeC,EAAAA,EAAAA,GAAQP,GAC7B,GAAIE,EAAMM,QAAS,CACjB,MAAMC,EAAWP,EAAMM,QAAQC,SAE/B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAASE,OAAQD,IAAK,CAAC,IAADE,EACxC,MAAMC,EAAMJ,EAASC,GACrB,GAAIG,IAAkB,QAAXD,EAAAH,EAASC,UAAE,IAAAE,OAAA,EAAXA,EAAaE,MAAQC,OAA0B,UAAG,CAC3D,MAAMC,EAAOH,EAAII,wBACSD,EAAKE,IAAMH,OAAOI,YAAc,GAAKH,EAAKE,KAAOH,OAAOI,YAAc,GAE9FC,YAAW,KACTtB,GAAa,GACZiB,OAA0B,WAAI,CAAK,GACnC,IAEP,CACA,IAAMA,OAA0B,UAAG,CAAC,IAADM,EACjC,MAAML,EAAOH,EAAII,wBACSD,EAAKE,IAAMH,OAAOI,YAAc,GAAKH,EAAKE,KAAOH,OAAOI,YAAc,GACxD,QAAnBE,EAAIf,EAAaI,UAAE,IAAAW,GAAfA,EAAiBP,IACxCM,YAAW,KACTvB,EAAWS,EAAaI,GAAGI,IAAI,EAAM,GACpC,IAEP,CACF,CACF,IACC,CAAChB,EAAcD,IAEZyB,GAAWjB,EAAAA,EAAAA,cAAY,KAC3BN,EAAc,CAAEwB,MAAOR,OAAOS,WAAYC,OAAQV,OAAOI,aAAc,GACtE,CAACpB,IAaJ,OAXA2B,EAAAA,EAAAA,YAAU,KACR3B,EAAc,CAAEwB,MAAOR,OAAOS,WAAYC,OAAQV,OAAOI,cAEzDJ,OAAOY,iBAAiB,SAAUvB,GAClCW,OAAOY,iBAAiB,SAAUL,GAC3B,KACLP,OAAOa,oBAAoB,SAAUxB,GACrCW,OAAOa,oBAAoB,SAAUN,EAAS,IAE/C,KAGDO,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAkBlB,IAAKX,EAAMO,SAAA,EAC1CF,EAAAA,EAAAA,GAAQP,GAAagC,KAAI,CAACC,EAAQC,KACjCC,EAAAA,EAAAA,KAAC1C,EAAM,CAELqB,GAAImB,EAAOnB,GACXsB,UAAWH,EAAOG,UAClBC,SAAUJ,EAAOI,SACjBC,YAAaL,EAAOM,YACpBN,OAAQA,GALHC,MAQTC,EAAAA,EAAAA,KAACxC,EAAM,MACH,EAIV,GAAe6C,EAAAA,EAAAA,MAAK5C,E","sources":["webpack://blocknite/./src/components/ScrollContainer/style.module.scss?a808","components/ScrollContainer/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__zm000\"};","import { lazy, memo, useEffect, useRef, useCallback } from 'react';\r\nimport styles from './style.module.scss';\r\nimport { useStateProvider } from '../../context/state';\r\nimport { screens } from '../../constants/screens';\r\n\r\nconst Screen = lazy(() => import(\"../Screen\"));\r\nconst Footer = lazy(() => import(\"../Footer\"));\r\n\r\nconst ScrollContainer = () => {\r\n  const { updatePage, setScrolling, setWindowSize, windowWidth } = useStateProvider();\r\n  const pages = useRef<HTMLDivElement | null>(null);\r\n\r\n  const checkCenter = useCallback(() => {\r\n    const screensValue = screens(windowWidth)\r\n    if (pages.current) {\r\n      const children = pages.current.children;\r\n\r\n      for (let i = 0; i < children.length; i++) {\r\n        const ref = children[i] as HTMLElement;\r\n        if (ref && children[i]?.id === (window as any)[\"pageValue\"]) {\r\n          const rect = ref.getBoundingClientRect();\r\n          const isElementCentered = rect.top < window.innerHeight / 2 && rect.top > -window.innerHeight / 2;\r\n          if (isElementCentered) {\r\n            setTimeout(() => {\r\n              setScrolling(false);\r\n              (window as any)[\"scrolling\"] = false;\r\n            }, 800);\r\n          }\r\n        }\r\n        if (!(window as any)[\"scrolling\"]) {\r\n          const rect = ref.getBoundingClientRect();\r\n          const isElementCentered = rect.top < window.innerHeight / 2 && rect.top > -window.innerHeight / 2;\r\n          if (isElementCentered && screensValue[i]?.id) {\r\n            setTimeout(() => {\r\n              updatePage(screensValue[i].id, false);\r\n            }, 200);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [setScrolling, updatePage]);\r\n\r\n  const onResize = useCallback(() => {\r\n    setWindowSize({ width: window.innerWidth, height: window.innerHeight });\r\n  }, [setWindowSize]);\r\n\r\n  useEffect(() => {\r\n    setWindowSize({ width: window.innerWidth, height: window.innerHeight });\r\n\r\n    window.addEventListener(\"scroll\", checkCenter);\r\n    window.addEventListener(\"resize\", onResize);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", checkCenter);\r\n      window.removeEventListener(\"resize\", onResize);\r\n    };\r\n  }, []);\r\n  \r\n  return (\r\n    <div className={styles.container} ref={pages}>\r\n      {screens(windowWidth).map((screen, index) => (\r\n        <Screen\r\n          key={index}\r\n          id={screen.id}\r\n          component={screen.component}\r\n          imageUrl={screen.imageUrl}\r\n          mobileImage={screen.imageMobile}\r\n          screen={screen}\r\n        />\r\n      ))}\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ScrollContainer);\r\n"],"names":["Screen","lazy","Footer","ScrollContainer","updatePage","setScrolling","setWindowSize","windowWidth","useStateProvider","pages","useRef","checkCenter","useCallback","screensValue","screens","current","children","i","length","_children$i","ref","id","window","rect","getBoundingClientRect","top","innerHeight","setTimeout","_screensValue$i","onResize","width","innerWidth","height","useEffect","addEventListener","removeEventListener","_jsxs","className","styles","map","screen","index","_jsx","component","imageUrl","mobileImage","imageMobile","memo"],"sourceRoot":""}