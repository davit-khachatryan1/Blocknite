{"version":3,"file":"static/js/139.1f46c25f.chunk.js","mappings":"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","sources":["webpack://blocknite/./src/components/TitleBlock/style.module.scss?d739","components/TitleBlock/index.tsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"titleBlock\":\"style_titleBlock__kZo1n\",\"description\":\"style_description__5SngD\",\"isMobile\":\"style_isMobile__rwC6r\",\"descriptionBottom\":\"style_descriptionBottom__4VAMm\"};","import { memo, useEffect, useRef, useCallback } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport { calcVW } from '../../utils/hooks/functions';\nimport { useStateProvider } from '../../context/state';\n\nimport styles from './style.module.scss';\n\ninterface TitleBlockProps {\n    title: string;\n    description?: string;\n    mobileClassName?: boolean;\n    descriptionBottom?: boolean;\n    secondTitle?: string;\n    withOutDescription?: boolean;\n}\n\nconst TitleBlock: React.FC<TitleBlockProps> = ({\n    title,\n    description = '',\n    mobileClassName = false,\n    descriptionBottom = false,\n    secondTitle,\n    withOutDescription = false\n}) => {\n    const { scrolling, windowWidth } = useStateProvider();\n    const controls = useAnimation();\n    const ref1 = useRef<HTMLDivElement>(null);\n\n    const titleControls = useAnimation();\n    const [refTitle, inVewTitle] = useInView({\n        triggerOnce: false,\n        threshold: 0,\n    });\n\n    useEffect(() => {\n        if (!scrolling && inVewTitle) {\n            titleControls.start('visible');\n        }\n    }, [inVewTitle, scrolling, titleControls]);\n\n    const checkCenter = useCallback(() => {\n        if (!(window as any)[\"scrolling\"]) {\n            if (ref1.current) {\n                const rect = ref1.current.getBoundingClientRect();\n                const windowHeight = window.innerHeight || document.documentElement.clientHeight;\n                const center = rect.top + rect.height / 2;\n\n                const isElementCentered = center > 0 && center < windowHeight / 2;\n                if (isElementCentered) {\n                    controls.start({\n                        width: calcVW('168px', (window as any).customWidth),\n                        transition: { duration: 0.5, ease: 'easeOut' }\n                    });\n                }\n            }\n        }\n    }, [controls]);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", checkCenter);\n        return () => {\n            window.removeEventListener(\"scroll\", checkCenter);\n        };\n    }, []);\n\n    return (\n        <>\n            <div className={styles.titleBlock}>\n                <div style={{ width: calcVW('168px', windowWidth), display: 'flex', justifyContent: 'center', alignItems: 'center' }} className={mobileClassName ? styles.isMobile : ''}>\n                    <motion.div\n                        ref={ref1}\n                        initial={{ width: '0', height: calcVW('29px', windowWidth) }}\n                        animate={controls}\n                        style={{\n                            height: calcVW('29px', windowWidth),\n                            overflow: 'hidden',\n                            position: 'relative',\n                            display: 'flex',\n                            justifyContent: 'center'\n                        }}\n                    >\n                        <img\n                            src='/icons/arrow-left.svg'\n                            className={styles.arrowIcon}\n                            style={{\n                                objectPosition: 'center',\n                                width: '100%',\n                                height: '100%',\n                            }}\n                            loading='lazy'\n                            alt=\"Arrow Left\"\n                        />\n                    </motion.div>\n                </div>\n                <motion.div\n                    ref={refTitle}\n                    animate={titleControls}\n                    initial=\"hidden\"\n                    variants={{\n                        hidden: { opacity: 0, transform: `translateY(${calcVW('-25px', windowWidth)})` },\n                        visible: {\n                            opacity: 1,\n                            transform: 'translateY(0)',\n                            transition: { duration: 0.8 }\n                        }\n                    }}\n                >\n                    <div>{mobileClassName && secondTitle ? secondTitle : title}</div>\n                </motion.div>\n\n                <div style={{ width: calcVW('168px', windowWidth), display: 'flex', justifyContent: 'center', alignItems: 'center' }} className={mobileClassName ? styles.isMobile : ''}>\n                    <motion.div\n                        initial={{ width: '0', height: calcVW('29px', windowWidth) }}\n                        animate={controls}\n                        style={{\n                            height: calcVW('29px', windowWidth),\n                            overflow: 'hidden',\n                            position: 'relative',\n                            display: 'flex',\n                            justifyContent: 'center'\n                        }}\n                    >\n                        <img\n                            src='/icons/arrow-right.svg'\n                            className={styles.arrowIcon}\n                            style={{\n                                objectPosition: 'center',\n                                width: '100%',\n                                height: '100%',\n                            }}\n                            loading='lazy'\n                            alt=\"Arrow Right\"\n                        />\n                    </motion.div>\n                </div>\n            </div>\n            {!withOutDescription && (\n                <motion.div\n                    className={`${styles.description} ${descriptionBottom ? styles.descriptionBottom : ''}`}\n                    animate={titleControls}\n                    initial=\"hidden\"\n                    variants={{\n                        hidden: { opacity: 0, transform: `translateY(${calcVW('-25px', windowWidth)})` },\n                        visible: {\n                            opacity: 1,\n                            transform: 'translateY(0)',\n                            transition: { duration: 0.8, delay: 0.8 }\n                        }\n                    }}\n                >\n                    {description}\n                </motion.div>\n            )}\n        </>\n    );\n};\n\nexport default memo(TitleBlock);","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["TitleBlock","_ref","title","description","mobileClassName","descriptionBottom","secondTitle","withOutDescription","scrolling","windowWidth","useStateProvider","controls","useAnimation","ref1","useRef","titleControls","refTitle","inVewTitle","useInView","triggerOnce","threshold","useEffect","start","checkCenter","useCallback","window","current","rect","getBoundingClientRect","windowHeight","innerHeight","document","documentElement","clientHeight","center","top","height","width","calcVW","customWidth","transition","duration","ease","addEventListener","removeEventListener","_jsxs","_Fragment","children","className","styles","titleBlock","_jsx","style","display","justifyContent","alignItems","isMobile","motion","div","ref","initial","animate","overflow","position","src","arrowIcon","objectPosition","loading","alt","variants","hidden","opacity","transform","concat","visible","delay","memo","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","IntersectionObserver","bounds","isIntersecting","target","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","entryTarget","previousEntryTarget","result"],"sourceRoot":""}