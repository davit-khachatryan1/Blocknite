{"version":3,"file":"static/js/512.f4330dda.chunk.js","mappings":"+KACA,QAAwB,qBAAxB,EAAsD,sBAAtD,EAAwF,yBAAxF,EAA0H,sBAA1H,EAAuJ,oBAAvJ,EAAoL,sB,uBCcpL,MAAMA,EAAoCC,IAAuD,IAAtD,MAAEC,EAAK,YAAEC,EAAW,MAAEC,EAAK,UAAEC,EAAS,OAAEC,GAAQL,EACvF,MAAM,UAAEM,IAAcC,EAAAA,EAAAA,KAChBC,GAAgBC,EAAAA,EAAAA,MACfC,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,IAC5CC,EAAUC,IAAeC,EAAAA,EAAAA,IAAU,CACtCC,aAAa,EACbC,UAAW,IAGTC,GAAWC,EAAAA,EAAAA,UAAQ,MACrBC,OAAQ,CACJC,QAAS,EACTC,OAAQ,IACRC,WAAY,CAAEC,SAAU,MAE5BC,QAAS,CACLJ,QAAS,EACTC,OAAQ,OACRC,WAAY,CAAEC,SAAU,SAE5B,IAuBJ,OArBAE,EAAAA,EAAAA,YAAU,MACDpB,GAAaI,IACVI,GAAeT,GAAUF,GACzBQ,GAAiB,GACjBH,EAAcmB,MAAM,YAEpBnB,EAAcmB,MAAM,UAE5B,GACD,CAACb,EAAaT,EAAQF,EAAOG,KAEhCoB,EAAAA,EAAAA,YAAU,KACDpB,GAAcI,IACXL,GAAUF,EACVK,EAAcmB,MAAM,WAEpBnB,EAAcmB,MAAM,UAE5B,GACD,CAACtB,EAAQF,EAAOG,EAAWI,KAG1BkB,EAAAA,EAAAA,MAAA,OAAKC,UAAS,GAAAC,OAAMzB,IAAWF,GAAU4B,GAAgBC,SAAA,EACrDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAcE,QAASA,IAAM7B,EAAUC,IAAWF,GAAS,EAAIA,GAAO6B,SAAA,CACjF/B,GACDiC,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,EAAcC,UAC1BE,EAAAA,EAAAA,KAAA,OAAKC,IAAI,oBAAoBC,QAAQ,OAAOC,IAAI,sBAGxDT,EAAAA,EAAAA,MAACU,EAAAA,EAAOC,IAAG,CACPC,IAAK3B,EACLgB,UAAWE,EACXU,QAASjC,EACTkC,QAAQ,SACRxB,SAAUA,EAASc,SAAA,EAEnBE,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,KAChBG,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,EAAYC,SAAE9B,KAC9BgC,EAAAA,EAAAA,KAAA,OAAKL,UAAWE,SAElB,EAId,GAAeY,EAAAA,EAAAA,MAAK5C,E","sources":["webpack://blocknite/./src/components/FAQInput/style.module.scss?94f4","components/FAQInput/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"style_input__E5+mz\",\"vector\":\"style_vector__d+H5k\",\"textBlock\":\"style_textBlock__HKTJa\",\"divide\":\"style_divide__89OJp\",\"text\":\"style_text__OnTtm\",\"active\":\"style_active__iJK+B\"};","import { memo, useEffect, useState, useMemo } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\n\nimport styles from './style.module.scss';\nimport { useStateProvider } from '../../context/state';\n\ninterface FAQInputProps {\n    title: string;\n    description: string;\n    index: number;\n    setActive: (index: number) => void;\n    active: number;\n}\n\nconst FAQInput: React.FC<FAQInputProps> = ({ title, description, index, setActive, active }) => {\n    const { scrolling } = useStateProvider();\n    const titleControls = useAnimation();\n    const [shouldAnimate, setShouldAnimate] = useState(true);\n    const [refTitle, inViewTitle] = useInView({\n        triggerOnce: false,\n        threshold: 1,\n    });\n\n    const variants = useMemo(() => ({\n        hidden: {\n            opacity: 0,\n            height: '0',\n            transition: { duration: 0.75 },\n        },\n        visible: {\n            opacity: 1,\n            height: 'auto',\n            transition: { duration: 0.75 },\n        },\n    }), []);\n\n    useEffect(() => {\n        if (!scrolling && shouldAnimate) {\n            if (inViewTitle && active == index) {\n                setShouldAnimate(false);\n                titleControls.start('visible')\n            } else {\n                titleControls.start('hidden')\n            }\n        }\n    }, [inViewTitle, active, index, scrolling])\n\n    useEffect(() => {\n        if (!scrolling && !shouldAnimate) {\n            if (active == index) {\n                titleControls.start('visible')\n            } else {\n                titleControls.start('hidden')\n            }\n        }\n    }, [active, index, scrolling, shouldAnimate])\n\n    return (\n        <div className={`${(active === index) && styles.active}`}>\n            <div className={styles.input} onClick={() => setActive(active === index ? -1 : index)}>\n                {title}\n                <div className={styles.vector}>\n                    <img src='/icons/vector.svg' loading='lazy' alt=\"vector icon\" />\n                </div>\n            </div>\n            <motion.div\n                ref={refTitle}\n                className={styles.textBlock}\n                animate={titleControls}\n                initial=\"hidden\"\n                variants={variants}\n            >\n                <div className={styles.divide} />\n                <div className={styles.text}>{description}</div>\n                <div className={styles.divide} />\n            </motion.div>\n        </div>\n    );\n};\n\nexport default memo(FAQInput);\n"],"names":["FAQInput","_ref","title","description","index","setActive","active","scrolling","useStateProvider","titleControls","useAnimation","shouldAnimate","setShouldAnimate","useState","refTitle","inViewTitle","useInView","triggerOnce","threshold","variants","useMemo","hidden","opacity","height","transition","duration","visible","useEffect","start","_jsxs","className","concat","styles","children","onClick","_jsx","src","loading","alt","motion","div","ref","animate","initial","memo"],"sourceRoot":""}