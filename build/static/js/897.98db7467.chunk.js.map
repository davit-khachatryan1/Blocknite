{"version":3,"file":"static/js/897.98db7467.chunk.js","mappings":"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","sources":["webpack://blocknite/./src/components/ThirdScreen/style.module.scss?7fcd","components/ThirdScreen/index.tsx","webpack://blocknite/./src/components/TypeWriter/style.module.scss?3b9e","components/TypeWriter/index.tsx","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__zi8nb\",\"bgImage\":\"style_bgImage__SHJxg\",\"titleBlock\":\"style_titleBlock__cMXJn\",\"subTitle\":\"style_subTitle__FQ2xh\",\"mainBlock\":\"style_mainBlock__APTPk\",\"infoBlockContainer\":\"style_infoBlockContainer__xVk1n\",\"infoBlock\":\"style_infoBlock__I+EjS\",\"round\":\"style_round__E8IxV\",\"textBlock\":\"style_textBlock__70nUA\",\"title\":\"style_title__XEAEm\",\"description\":\"style_description__BG-Zy\",\"line\":\"style_line__U+vRO\",\"lineTop\":\"style_lineTop__c3gXB\",\"lineBottom\":\"style_lineBottom__3+1k7\",\"leftBorder\":\"style_leftBorder__LJJGy\",\"bottomContainer\":\"style_bottomContainer__xYEE4\",\"decorations\":\"style_decorations__qWz+v\",\"carouselContainer\":\"style_carouselContainer__xFqqZ\",\"swiperElement\":\"style_swiperElement__LPsyO\",\"swiperElementText\":\"style_swiperElementText__MXUQS\",\"mobileSlider\":\"style_mobileSlider__kkLgv\",\"desktop\":\"style_desktop__yFC+l\"};","import { lazy, memo, useEffect, useState, useCallback } from 'react';\r\nimport { motion, useAnimation } from 'framer-motion';\r\nimport Slider from 'react-slick';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useStateProvider } from '../../context/state';\r\nimport { calcVW } from '../../utils/hooks/functions';\r\nimport styles from './style.module.scss';\r\nimport TypeWriter from '../TypeWriter';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nconst TitleBlock = lazy(() => import(\"../TitleBlock\"));\r\n\r\nconst settings = {\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    autoplay: true,\r\n    autoplaySpeed: 7000,\r\n    prevArrow: <img src='/icons/arrow-right-slider.svg' alt=\"Next\" loading='lazy' />,\r\n    nextArrow: <></>\r\n};\r\n\r\nconst settingsMobile = {\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    autoplay: true,\r\n    autoplaySpeed: 2000,\r\n    nextArrow: <img src='/icons/arrow-right-slider.svg' alt=\"Next\" loading='lazy' />,\r\n    prevArrow: <img src='/icons/arrow-left-slider.svg' alt=\"Prev\" loading='lazy' />\r\n};\r\n\r\nconst items = [\r\n    { id: '1', text: 'Forge Manna Stones at the Arcane Forge that power your Blocknite experience.' },\r\n    { id: '2', text: 'Raise an army of Treanin through the Manna Nexus, fuse Treanin together and customise them to perfection.' },\r\n    { id: '3', text: 'Battle the Orgurin grunts and level up your Treanin, getting bonus rewards. Are you brave enough to take on the Orgurin boss?' },\r\n    { id: '4', text: 'Buy and sell Treanin & Manna Stones at the marketplace.' },\r\n    { id: '5', text: 'Participate in the Blocknite community & devise the best strategies for maximising rewards.' },\r\n];\r\n\r\nconst ThirdScreen: React.FC = () => {\r\n    const { scrolling, windowWidth, windowHeight } = useStateProvider();\r\n    const [infoTitles, setInfoTitles] = useState({\r\n        first: false,\r\n        second: false,\r\n        third: false,\r\n    });\r\n\r\n    const blockControls1 = useAnimation();\r\n    const blockControls2 = useAnimation();\r\n    const blockControls3 = useAnimation();\r\n\r\n    const [refFirstBlock1, inViewFirstBlock1] = useInView({ triggerOnce: false, threshold: 1 });\r\n    const [refFirstBlock2, inViewFirstBlock2] = useInView({ triggerOnce: false, threshold: 1 });\r\n    const [refFirstBlock3, inViewFirstBlock3] = useInView({ triggerOnce: false, threshold: 1 });\r\n\r\n    const updateHeight = useCallback(() => {\r\n        let obj = { ...infoTitles };\r\n        if (inViewFirstBlock3) {\r\n            blockControls3.start({ height: calcVW('199px', windowWidth), transition: { duration: 0.5 } });\r\n            obj.third = true;\r\n        }\r\n        if (inViewFirstBlock2) {\r\n            blockControls2.start({ height: calcVW('199px', windowWidth), transition: { duration: 0.5 } });\r\n            obj.second = true;\r\n        }\r\n        if (inViewFirstBlock1) {\r\n            blockControls1.start({ height: calcVW('199px', windowWidth), transition: { duration: 0.5 } });\r\n            obj.first = true;\r\n        }\r\n        setInfoTitles(obj);\r\n    }, [inViewFirstBlock1, inViewFirstBlock2, inViewFirstBlock3, windowWidth, blockControls1, blockControls2, blockControls3]);\r\n\r\n    useEffect(() => {\r\n        if (windowWidth > 576 && !scrolling) {\r\n            updateHeight();\r\n        }\r\n    }, [inViewFirstBlock1, inViewFirstBlock2, inViewFirstBlock3, scrolling, windowWidth, updateHeight]);\r\n\r\n    const controlsBottom = useAnimation();\r\n    const controlsBottomSlider = useAnimation();\r\n    const [ref, inView] = useInView({ triggerOnce: false, threshold: 1 });\r\n\r\n    useEffect(() => {\r\n        if (!scrolling && inView) {\r\n            controlsBottom.start('visible');\r\n            controlsBottomSlider.start('visible');\r\n        }\r\n    }, [controlsBottom, inView, scrolling, windowHeight, controlsBottomSlider]);\r\n\r\n    const handleAfterChange = useCallback((e: number) => {\r\n        const obj = { first: false, second: false, third: false };\r\n        if (e === 0) {\r\n            obj.first = true;\r\n        } else if (e === 1) {\r\n            obj.second = true;\r\n        } else {\r\n            obj.third = true;\r\n        }\r\n        setInfoTitles(obj);\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <TitleBlock title=\"How to play & Earn\" description=\"Partake in our airdrop competition and win millions of $NITE token!\" mobileClassName={windowWidth <= 576} />\r\n            <div className={`${styles.mainBlock} ${styles.desktop}`} ref={refFirstBlock1}>\r\n                <motion.div\r\n                    animate={blockControls1}\r\n                    initial={{ height: '0' }}\r\n                    transition={{ duration: 0.5 }}\r\n                    className={styles.infoBlockContainer}\r\n                >\r\n                    <div className={styles.infoBlock}>\r\n                        <div className={`${styles.line} ${styles.lineTop}`} />\r\n                        <div className={styles.round}>1</div>\r\n                        <div className={styles.textBlock}>\r\n                            {infoTitles.first && (\r\n                                <div className={styles.title}>\r\n                                    <TypeWriter classname=\"titleOrange\" text=\"Buy\" time={200} delay={100} />\r\n                                    <TypeWriter classname=\"titleWhite\" text=\"$NITE\" time={300} delay={300} />\r\n                                </div>\r\n                            )}\r\n                            <div className={styles.description}>Nites are used to power the blocknite ecosystem, from buying and selling items to activating Soul Stones.</div>\r\n                        </div>\r\n                        <div className={`${styles.line} ${styles.lineBottom}`} />\r\n                        <div className={styles.leftBorder} />\r\n                    </div>\r\n                </motion.div>\r\n            </div>\r\n            <div className={`${styles.mainBlock} ${styles.desktop}`} ref={refFirstBlock2}>\r\n                <motion.div\r\n                    animate={blockControls2}\r\n                    initial={{ height: '0' }}\r\n                    transition={{ duration: 0.5 }}\r\n                    className={styles.infoBlockContainer}\r\n                >\r\n                    <div className={styles.infoBlock}>\r\n                        <div className={`${styles.line} ${styles.lineTop}`} />\r\n                        <div className={styles.round}>2</div>\r\n                        <div className={styles.textBlock}>\r\n                            {infoTitles.second && (\r\n                                <div className={styles.title}>\r\n                                    <TypeWriter classname=\"titleOrange\" text=\"Get a\" time={200} delay={100} />\r\n                                    <TypeWriter classname=\"titleWhite\" text=\"Treanin\" time={300} delay={300} />\r\n                                </div>\r\n                            )}\r\n                            <div className={styles.description}>Treanin are created when you activate a Soul Stone, you can also buy them from players at the marketplace.</div>\r\n                        </div>\r\n                        <div className={`${styles.line} ${styles.lineBottom}`} />\r\n                        <div className={styles.leftBorder} />\r\n                    </div>\r\n                </motion.div>\r\n            </div>\r\n            <div className={`${styles.mainBlock} ${styles.desktop}`} ref={refFirstBlock3}>\r\n                <motion.div\r\n                    animate={blockControls3}\r\n                    initial={{ height: '0' }}\r\n                    transition={{ duration: 0.5 }}\r\n                    className={styles.infoBlockContainer}\r\n                >\r\n                    <div className={styles.infoBlock}>\r\n                        <div className={`${styles.line} ${styles.lineTop}`} />\r\n                        <div className={styles.round}>3</div>\r\n                        <div className={styles.textBlock}>\r\n                            {infoTitles.third && (\r\n                                <div className={styles.title}>\r\n                                    <TypeWriter classname=\"titleOrange\" text=\"Fight & \" time={300} delay={100} />\r\n                                    <TypeWriter classname=\"titleWhite\" text=\"earn!\" time={200} delay={400} />\r\n                                </div>\r\n                            )}\r\n                            <div className={styles.description}>Battle Orgurin monsters at the battlegrounds, with new features such as boss fights and PVP coming soon.</div>\r\n                        </div>\r\n                        <div className={`${styles.line} ${styles.lineBottom}`} />\r\n                        <div className={styles.leftBorder} />\r\n                    </div>\r\n                </motion.div>\r\n            </div>\r\n            {windowWidth <= 576 && (\r\n                <Slider {...settingsMobile} className={styles.mobileSlider} afterChange={handleAfterChange}>\r\n                    <div className={styles.mainBlock}>\r\n                        <div className={styles.infoBlockContainer}>\r\n                            <div className={styles.infoBlock}>\r\n                                <div className={`${styles.line} ${styles.lineTop}`} />\r\n                                <div className={styles.round}>1</div>\r\n                                <div className={styles.textBlock}>\r\n                                    <div className={styles.title}>\r\n                                        {infoTitles.first && <TypeWriter classname=\"titleOrange\" text=\"Buy\" time={200} delay={100} />}\r\n                                        {infoTitles.first && <TypeWriter classname=\"titleWhite\" text=\"$NITE\" time={300} delay={300} />}\r\n                                    </div>\r\n                                    <div className={styles.description}>Nites are used to power the blocknite ecosystem, from buying and selling items to activating Soul Stones.</div>\r\n                                </div>\r\n                                <div className={`${styles.line} ${styles.lineBottom}`} />\r\n                                <div className={styles.leftBorder} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.mainBlock}>\r\n                        <div className={styles.infoBlockContainer}>\r\n                            <div className={styles.infoBlock}>\r\n                                <div className={`${styles.line} ${styles.lineTop}`} />\r\n                                <div className={styles.round}>2</div>\r\n                                <div className={styles.textBlock}>\r\n                                    <div className={styles.title}>\r\n                                        {infoTitles.second && <TypeWriter classname=\"titleOrange\" text=\"Get a\" time={200} delay={100} />}\r\n                                        {infoTitles.second && <TypeWriter classname=\"titleWhite\" text=\"Treanin\" time={300} delay={300} />}\r\n                                    </div>\r\n                                    <div className={styles.description}>Treanin are created when you activate a Soul Stone, you can also buy them from players at the marketplace.</div>\r\n                                </div>\r\n                                <div className={`${styles.line} ${styles.lineBottom}`} />\r\n                                <div className={styles.leftBorder} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.mainBlock}>\r\n                        <div className={styles.infoBlockContainer}>\r\n                            <div className={styles.infoBlock}>\r\n                                <div className={`${styles.line} ${styles.lineTop}`} />\r\n                                <div className={styles.round}>3</div>\r\n                                <div className={styles.textBlock}>\r\n                                    <div className={styles.title}>\r\n                                        {infoTitles.third && <TypeWriter classname=\"titleOrange\" text=\"Fight & \" time={300} delay={100} />}\r\n                                        {infoTitles.third && <TypeWriter classname=\"titleWhite\" text=\"earn!\" time={200} delay={400} />}\r\n                                    </div>\r\n                                    <div className={styles.description}>Battle Orgurin monsters at the battlegrounds, with new features such as boss fights and PVP coming soon.</div>\r\n                                </div>\r\n                                <div className={`${styles.line} ${styles.lineBottom}`} />\r\n                                <div className={styles.leftBorder} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Slider>\r\n            )}\r\n\r\n            <div ref={ref} className={styles.bottomContainer}>\r\n                <motion.img\r\n                    className={styles.decorations}\r\n                    src='/icons/decorations.svg'\r\n                    initial=\"hidden\"\r\n                    animate={controlsBottom}\r\n                    variants={{\r\n                        hidden: { opacity: 0, marginLeft: calcVW('-200px', windowWidth) },\r\n                        visible: {\r\n                            opacity: 1,\r\n                            marginLeft: '0',\r\n                            transition: { duration: 0.5 }\r\n                        }\r\n                    }}\r\n                />\r\n                <motion.div\r\n                    className={styles.carouselContainer}\r\n                    initial=\"hidden\"\r\n                    animate={controlsBottomSlider}\r\n                    variants={{\r\n                        hidden: { opacity: 0 },\r\n                        visible: {\r\n                            opacity: 1,\r\n                            transition: { duration: 0.5 }\r\n                        }\r\n                    }}\r\n                >\r\n                    <Slider {...settings}>\r\n                        {items.map((item, index) => (\r\n                            <div key={index} className={styles.swiperElement}>\r\n                                <div className={styles.swiperElementText}>{item.text}</div>\r\n                            </div>\r\n                        ))}\r\n                    </Slider>\r\n                </motion.div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(ThirdScreen);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"altarin\":\"style_altarin__xZvfb\",\"name\":\"style_name__a9lSK\",\"titleOrange\":\"style_titleOrange__G9xlt\",\"titleWhite\":\"style_titleWhite__yaESs\",\"value\":\"style_value__KNQW8\"};","import { useState, useEffect, memo } from 'react';\r\n\r\nimport styles from './style.module.scss';\r\n\r\ninterface TypeWriterProps {\r\n    text: string;\r\n    classname: string;\r\n    delay?: number;\r\n    time?: number;\r\n}\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, classname, delay = 0, time = 500 }) => {\r\n    const [displayedText, setDisplayedText] = useState('');\r\n    const typingSpeed = time / text.length;\r\n\r\n    useEffect(() => {\r\n        let index = -1;\r\n        let timer: NodeJS.Timeout | null = null;\r\n\r\n        const startTyping = () => {\r\n            timer = setInterval(() => {\r\n                index++;\r\n                setDisplayedText((prev) => prev + text.charAt(index));\r\n                if (index === text.length) {\r\n                    if (timer) clearInterval(timer);\r\n                }\r\n            }, typingSpeed);\r\n        };\r\n\r\n        const timeout = setTimeout(startTyping, delay);\r\n\r\n        return () => {\r\n            if (timer) clearInterval(timer);\r\n            clearTimeout(timeout);\r\n        };\r\n    }, [text, typingSpeed]);\r\n\r\n    return <div className={styles[classname]}>{displayedText}</div>;\r\n};\r\n\r\nexport default memo(TypeWriter);","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["TitleBlock","lazy","settings","infinite","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","prevArrow","_jsx","src","alt","loading","nextArrow","_Fragment","settingsMobile","items","id","text","ThirdScreen","scrolling","windowWidth","windowHeight","useStateProvider","infoTitles","setInfoTitles","useState","first","second","third","blockControls1","useAnimation","blockControls2","blockControls3","refFirstBlock1","inViewFirstBlock1","useInView","triggerOnce","threshold","refFirstBlock2","inViewFirstBlock2","refFirstBlock3","inViewFirstBlock3","updateHeight","useCallback","obj","start","height","calcVW","transition","duration","useEffect","controlsBottom","controlsBottomSlider","ref","inView","handleAfterChange","e","_jsxs","className","styles","children","title","description","mobileClassName","concat","motion","div","animate","initial","TypeWriter","classname","time","delay","Slider","afterChange","img","variants","hidden","opacity","marginLeft","visible","map","item","index","memo","_ref","displayedText","setDisplayedText","typingSpeed","length","timer","timeout","setTimeout","startTyping","setInterval","prev","charAt","clearInterval","clearTimeout","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}