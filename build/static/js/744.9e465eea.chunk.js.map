{"version":3,"file":"static/js/744.9e465eea.chunk.js","mappings":"kIACA,QAA4B,yB,iCCG5B,MAAMA,GAAiBC,EAAAA,EAAAA,OAAK,IAAM,gCAU5BC,EAAgCC,IAAuD,IAAtD,GAAEC,EAAE,UAAEC,EAAS,SAAEC,EAAQ,YAAEC,EAAW,OAAEC,GAAQL,EACrF,MAAM,YAAEM,IAAgBC,EAAAA,EAAAA,MACjBC,EAAeC,IAAoBC,EAAAA,EAAAA,WAAS,GAE7CC,GAAgCC,EAAAA,EAAAA,UAAQ,MAC5CC,MAAO,OACPC,SAAU,WACVC,QAAS,OACTC,SAAU,SACVC,gBAAgB,OAADC,OAASZ,GAAe,IAAMF,EAAcD,EAAQ,QACjE,CAACG,EAAaF,EAAaD,IAEzBgB,GAAiCP,EAAAA,EAAAA,UAAQ,MAC7CC,MAAO,OACPO,OAAQ,OACRN,SAAU,WACVO,KAAM,EACNC,IAAK,KACH,IAEEC,GAAeX,EAAAA,EAAAA,UAAQ,MAC3BC,MAAO,OACPO,OAAQ,OACRJ,SAAU,YACR,IAYJ,OAVAQ,EAAAA,EAAAA,YAAU,KACR,GAAIlB,GAAeE,EAAe,CAChCC,GAAiB,GACjB,MAAMgB,EAAUC,YAAW,KACzBjB,GAAiB,GACjBkB,aAAaF,EAAQ,GACpB,IACL,IACC,CAACnB,KAGFsB,EAAAA,EAAAA,MAAA,OAAKC,MAAOlB,EAAgBmB,UAAWC,EAAkB9B,GAAIA,EAAG+B,SAAA,CAC7DxB,IACCyB,EAAAA,EAAAA,KAAA,OAAKJ,MAAOV,EAAgBa,UAC1BC,EAAAA,EAAAA,KAACpC,EAAc,IAAMS,GAAe,IAAMD,EAAO6B,OAAS7B,EAAO8B,aAGrEF,EAAAA,EAAAA,KAAA,OAAKJ,MAAON,EAAaS,SACtB9B,MAEC,EAIV,GAAekC,EAAAA,EAAAA,MAAKrC,E","sources":["webpack://blocknite/./src/components/Screen/style.module.scss?60f9","components/Screen/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__ivvIE\"};","import styles from './style.module.scss';\r\nimport { useStateProvider } from '../../context/state';\r\nimport { CSSProperties, lazy, memo, useEffect, useMemo, useState } from 'react';\r\n\r\nconst ParticleCanvas = lazy(() => import(\"../Particles\"));\r\n\r\ninterface ScreenProps {\r\n  id: string;\r\n  component: React.ReactNode;\r\n  imageUrl: string;\r\n  mobileImage: string;\r\n  screen?: any;\r\n}\r\n\r\nconst Screen: React.FC<ScreenProps> = ({ id, component, imageUrl, mobileImage, screen }) => {\r\n  const { windowWidth } = useStateProvider();\r\n  const [showParticles, setShowParticles] = useState(true);\r\n\r\n  const containerStyle: CSSProperties = useMemo(() => ({\r\n    width: '100%',\r\n    position: 'relative',\r\n    display: 'flex',\r\n    overflow: 'hidden',\r\n    backgroundImage: `url(${windowWidth <= 576 ? mobileImage : imageUrl})`\r\n  }), [windowWidth, mobileImage, imageUrl]);\r\n\r\n  const fullScreenStyle: CSSProperties = useMemo(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    position: 'absolute',\r\n    left: 0,\r\n    top: 0\r\n  }), []);\r\n\r\n  const contentStyle = useMemo(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    overflow: 'hidden'\r\n  }), []);\r\n\r\n  useEffect(() => {\r\n    if (windowWidth && showParticles) {\r\n      setShowParticles(false);\r\n      const timeout = setTimeout(() => {\r\n        setShowParticles(true);\r\n        clearTimeout(timeout)\r\n      }, 400)\r\n    }\r\n  }, [windowWidth])\r\n\r\n  return (\r\n    <div style={containerStyle} className={styles.container} id={id}>\r\n      {showParticles && (\r\n        <div style={fullScreenStyle} >\r\n          <ParticleCanvas {...(windowWidth <= 576 ? screen.mobile : screen.desktop)} />\r\n        </div>\r\n      )}\r\n      <div style={contentStyle}>\r\n        {component}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Screen);"],"names":["ParticleCanvas","lazy","Screen","_ref","id","component","imageUrl","mobileImage","screen","windowWidth","useStateProvider","showParticles","setShowParticles","useState","containerStyle","useMemo","width","position","display","overflow","backgroundImage","concat","fullScreenStyle","height","left","top","contentStyle","useEffect","timeout","setTimeout","clearTimeout","_jsxs","style","className","styles","children","_jsx","mobile","desktop","memo"],"sourceRoot":""}